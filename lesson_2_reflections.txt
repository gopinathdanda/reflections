Lesson 2
+++++++++++

1. INITIALIZE
-----------------
git init -> to initialize
git status -> to get status and list of files having untracked changes

2. ADD
-----------------
git add <file1> <file2> -> adds file to staging area. Lets us group files to be bundled into a commit.
git reset -> unstage all files

3. MONITORING CHANGES
-----------------
git checkout master -> go back to master (leave detached HEAD)

git diff -> difference between working dir and staging area
git diff --staged -> difference between staging area and repo
git diff commit1 commit2 -> difference between the two commits

git reset --hard -> unstage all files and remove all changes in working directory (IRREVERSIBLE!!!)

4. BRANCH
-----------------
Branch to try out new stuff. Can be later merged. For branching, LABELS should be used.
git branch -> show all branches and the current branch I am on
git branch label -> create branch with label at the current checkout point

Must be careful. All commits can point to only its parent. As a result, branching without labels can make a commit inaccessible.

5. MERGE
-----------------
To monitor changes::
gitk (GUI to see merges, branches, commits, etc.)
git log --graph --oneline --decorate --all (show merges, branches, commits in the terminal with color coding)

To merge::
git checkout branch1 (merging on branch1)
git merge branch1 branch2 (git merge branch2 branch3 while being on branch1 will merge all three branches)
git merge -d branch2 (remove label of branch2 as it is not required now)

6. CONFLICT
-----------------
In case of conflict, git adds special lines to the conflicted files. You can see the conflicting files in git status.
<<<<<<< HEAD
//code in head or currently checked out branch
|||||||| common ancestors
//code originally present
=============
//code in the merging branch
>>>>>>>> branch2

Resolve the conflict then save, add, and finish merging by committing.

